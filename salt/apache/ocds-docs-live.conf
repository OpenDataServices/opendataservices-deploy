# vi: ft=apache
<VirtualHost *:80>
    ServerName new.standard.open-contracting.org
    <Location />
        Redirect / http://standard.open-contracting.org/
    </Location>
</VirtualHost>
<VirtualHost *:80>
    ServerName standard.open-contracting.org
    ServerAlias ocds-standard.*.docs.opencontracting.uk0.bigv.io ocds-standard.*.default.opendataservices.uk0.bigv.io
    ServerAlias *.standard.open-contracting.org
    {% set documentroot='/home/ocds-docs/web/' %}
    DocumentRoot {{ documentroot }}
    SetEnv BANNER /includes/banner_live.html

    {% set live_versions = ['latest', '1.1', 1.0] %}
    {% set profiles = {'ppp': ['latest']} %}
    {% set infrastructure_live_versions = ['latest', '0.9'] %}

    <Directory {{ documentroot }}>
        Require all granted
        Options Indexes FollowSymLinks IncludesNOEXEC
        AddOutputFilter INCLUDES .html
        # In a Directory block, so applies only when we'd otherwise be serving local files
        # ie. when not using a proxy
        RedirectMatch ^/infrastructure/(?!schema)(?!index.html)(?!switcher)([^/]+)/?$ /infrastructure/$1/en
        RedirectMatch ^/(?!robots\.txt)(?!legacy)(?!schema)(?!switcher)([^/]+)/?$ /$1/en
        RedirectMatch ^/profiles/([^/]+)/(?!schema)(?!extension)([^/]+)/?$ /profiles/$1/$2/en
        # Serve json with utf-8 media type
        # https://bugs.chromium.org/p/chromium/issues/detail?id=438464
        AddType "application/json;charset=utf-8" .json
    </Directory>
    <Directory {{ documentroot }}legacy/>
        Options +IncludesNOEXEC
        AddOutputFilter INCLUDES .html
    </Directory>
    <Location />
        RedirectMatch ^/$ /latest/
    </Location>
    RewriteMap unescape int:unescape

    <Location /infrastructure/en>
        RedirectMatch ^/infrastructure/en$ /infrastructure/latest/en
    </Location>

    <Location /infrastructure/latest>
        RedirectMatch ^/infrastructure/latest$ /infrastructure/latest/en
    </Location>

    <Location /switcher>
        RewriteEngine on
        RewriteCond "%{QUERY_STRING}" "!^branch=legacy"
        # Try using the referer to take you back to the same page in the
        # different version.
        # We match QUERY_STRING and HTTP_REFERER in the same RewriteCond as
        # it's only possible to backreference the most recent RewriteCond
        RewriteCond "%{HTTP_REFERER}:::%{QUERY_STRING}" "^https?://([^/]*)/([^/]*)/([^/]*)/(.*):::branch=(.*)$"
        RewriteRule ^(.*)$ /${unescape:%5}/%3/%4? [R]

        # For the legacy site, or if our http referer regex failed for some reason:
        RewriteCond "%{QUERY_STRING}" "^branch=(.*)$"
        RewriteRule ^(.*)$ /${unescape:%1}? [R]
    </Location>
    {% for profile, profile_live_versions in profiles.items() %}
    <Location /profiles/{{profile}}/>
        RedirectMatch ^/profiles/{{profile}}/$ /profiles/{{profile}}/latest/
    </Location>
    <Location /profiles/{{profile}}/switcher>
        RewriteEngine on
        # Try using the referer to take you back to the same page in the
        # different version.
        # We match QUERY_STRING and HTTP_REFERER in the same RewriteCond as
        # it's only possible to backreference the most recent RewriteCond
        RewriteCond "%{HTTP_REFERER}:::%{QUERY_STRING}" "^https?://([^/]*)/profiles/{{profile}}/([^/]*)/([^/]*)/(.*):::branch=(.*)$"
        RewriteRule ^(.*)$ /profiles/{{profile}}/${unescape:%5}/%3/%4? [R]

        # For the legacy site, or if our http referer regex failed for some reason:
        RewriteCond "%{QUERY_STRING}" "^branch=(.*)$"
        RewriteRule ^(.*)$ /profiles/{{profile}}/${unescape:%1}? [R]
    </Location>
    {% for version in live_versions %}
    <Location /profiles/{{profile}}/{{version}}/switcher>
        RewriteEngine on
        # Try using the referer to take you back to the same page in the
        # different version.
        # We match QUERY_STRING and HTTP_REFERER in the same RewriteCond as
        # it's only possible to backreference the most recent RewriteCond
        RewriteCond "%{HTTP_REFERER}:::%{QUERY_STRING}" "^https?://([^/]*)/(profiles/[^/]*/)?([^/]*)/([^/]*)/(.*):::lang=(.*)$"
        RewriteRule ^(.*)$ /%2%3/${unescape:%6}/%5? [R]

        # If our http referer regex failed for some reason:
        RewriteCond "%{QUERY_STRING}" "^lang=(.+)$"
        RewriteRule ^(.*)$ /profiles/{{profile}}/{{version}}/${unescape:%1}? [R]
    </Location>
    {% for lang in ['en', 'es'] %}
    <Location /profiles/{{profile}}/{{ version }}/{{ lang }}/>
        ErrorDocument 404 /profiles/{{profile}}/{{ version }}/{{ lang }}/404/
    </Location>
    <Location /profiles/{{profile}}/{{ version }}/{{ lang }}/404/>
        SetOutputFilter SUBSTITUTE
        Substitute "s|\"\.\./|\"/profiles/{{profile}}/{{ version }}/{{ lang }}/|i"
    </Location>
    {% endfor %}
    {% endfor %}
    {% endfor %}
    {% for version in live_versions %}
    {% for lang in ['en', 'es', 'fr'] %}
    <Location /{{ version }}/{{ lang }}/>
        ErrorDocument 404 /{{ version }}/{{ lang }}/404/
    </Location>
    <Location /{{ version }}/{{ lang }}/404/>
        SetOutputFilter SUBSTITUTE
        Substitute "s|\"\.\./|\"/{{ version }}/{{ lang }}/|i"
    </Location>
    {% endfor %}
    <Location /{{version}}/switcher>
        RewriteEngine on
        # Try using the referer to take you back to the same page in the
        # different version.
        # We match QUERY_STRING and HTTP_REFERER in the same RewriteCond as
        # it's only possible to backreference the most recent RewriteCond
        RewriteCond "%{HTTP_REFERER}:::%{QUERY_STRING}" "^https?://([^/]*)/([^/]*)/([^/]*)/(.*):::lang=(.*)$"
        RewriteRule ^(.*)$ /%2/${unescape:%5}/%4? [R]

        # For the legacy site, or if our http referer regex failed for some reason:
        RewriteCond "%{QUERY_STRING}" "^lang=(.*)$"
        RewriteRule ^(.*)$ /{{version}}/${unescape:%1}? [R]
    </Location>
    {% endfor %}

    <Location /infrastructure/switcher>
        RewriteEngine on
        # Try using the referer to take you back to the same page in the
        # different version.
        # We match QUERY_STRING and HTTP_REFERER in the same RewriteCond as
        # it's only possible to backreference the most recent RewriteCond
        RewriteCond "%{HTTP_REFERER}:::%{QUERY_STRING}" "^https?://([^/]*)/infrastructure/([^/]*)/([^/]*)/(.*):::branch=(.*)$"
        RewriteRule ^(.*)$ /infrastructure/${unescape:%5}/%3/%4? [R]

        # If our http referer regex failed for some reason:
        RewriteCond "%{QUERY_STRING}" "^branch=(.*)$"
        RewriteRule ^(.*)$ /infrastructure/${unescape:%1}? [R]
    </Location>

    {% for infrastructure_version in infrastructure_live_versions %}
        <Location /infrastructure/{{infrastructure_version}}/switcher>
            RewriteEngine on
            # Try using the referer to take you back to the same page in the
            # different version.
            # We match QUERY_STRING and HTTP_REFERER in the same RewriteCond as
            # it's only possible to backreference the most recent RewriteCond
            RewriteCond "%{HTTP_REFERER}:::%{QUERY_STRING}" "^https?://([^/]*)/infrastructure/([^/]*)/([^/]*)/(.*):::lang=(.*)$"
            RewriteRule ^(.*)$ /infrastructure/{{infrastructure_version}}/${unescape:%5}/%4? [R]

            RewriteCond "%{QUERY_STRING}" "^lang=(.*)$"
            RewriteRule ^(.*)$ /infrastructure/{{infrastructure_version}}/${unescape:%1}? [R]
        </Location>
    {% endfor %}

    <Location /1.0/>
        SetEnv BANNER /includes/banner_old.html
    </Location>

    # This block aplies only to requests that would be proxied to dev
    <Proxy http://ocds-standard.dev3.default.opendataservices.uk0.bigv.io/>
        # Redirects for pages that were on the old
        # standard.open-contracting.org blod site
        Redirect /announcing-the-ocds-help-desk http://www.open-contracting.org/2015/03/20/announcing-the-ocds-help-desk
        Redirect /beta http://www.open-contracting.org/2014/09/04/beta
        Redirect /blog http://www.open-contracting.org/latest-news/
        Redirect /community-web-meeting-exploring-civil-society-contract-monitoring-for-open-contracting-data http://www.open-contracting.org/2014/05/31/community-web-meeting-exploring-civil-society-contract-monitoring-for-open-contracting-data
        Redirect /community-web-meeting-media-use-cases-for-open-contracting-data http://www.open-contracting.org/2014/05/17/community-web-meeting-media-use-cases-for-open-contracting-data
        Redirect /comparing-contract-data-understanding-supply http://www.open-contracting.org/2014/04/30/comparing-contract-data-understanding-supply
        Redirect /contracting-data-comparison-modelling-contracts http://www.open-contracting.org/2014/06/10/contracting-data-comparison-modelling-contracts
        Redirect /contracting-data-comparison-updates http://www.open-contracting.org/2014/05/09/contracting-data-comparison-updates
        Redirect /data-standard-introduction-workshop-in-washington-dc-may-8th-2015 http://www.open-contracting.org/2015/04/14/data-standard-introduction-workshop-in-washington-dc-may-8th-2015
        Redirect /feed http://www.open-contracting.org/feed/
        Redirect /field-notes-transforming-canadian-procurement-data-to-ocds-format http://www.open-contracting.org/2014/09/25/field-notes-transforming-canadian-procurement-data-to-ocds-format
        Redirect /first-release http://www.open-contracting.org/2014/06/27/first-release
        Redirect /getinvolved /latest/en/support
        Redirect /intoduction-to-ocds-workshop-international-open-data-conference-ottawa-may-27th-2015 http://www.open-contracting.org/2015/04/12/intoduction-to-ocds-workshop-international-open-data-conference-ottawa-may-27th-2015
        Redirect /montreal-python-conference-pycon-sprint-what-we-discussed http://www.open-contracting.org/2014/04/19/montreal-python-conference-pycon-sprint-what-we-discussed
        Redirect /montreal-python-conference-pycon-sprint-what-we-worked-on http://www.open-contracting.org/2014/04/20/montreal-python-conference-pycon-sprint-what-we-worked-on
        Redirect /okfest-2014 http://www.open-contracting.org/2014/07/24/okfest-2014
        Redirect /open-contracting-data-standard-at-the-open-government-partnership http://www.open-contracting.org/2015/10/21/open-contracting-data-standard-at-the-open-government-partnership
        Redirect /open-contracting-data-standard-introductory-training http://www.open-contracting.org/2015/07/03/open-contracting-data-standard-introductory-training
        Redirect /open-data-comparison-beta http://www.open-contracting.org/2014/03/04/open-data-comparison-beta
        Redirect /participa /latest/en/support
        Redirect /progress /latest/en/support/history_and_development
        Redirect /project /latest/en
        Redirect /proyecto /latest/en
        Redirect /recursos /latest/en/support/tools
        Redirect /release-of-data-standard http://www.open-contracting.org/2014/11/18/release-of-data-standard
        Redirect /request-for-comments-extending-ocds-for-extractives-industries-and-land http://www.open-contracting.org/2014/12/18/request-for-comments-extending-ocds-for-extractives-industries-and-land
        Redirect /resources /latest/en/support/tools
        Redirect /sprinting-at-europython-2014 http://www.open-contracting.org/2014/07/31/sprinting-at-europython-2014
        Redirect /upgrading-ocds-governance-process-consultation-deadline-january-5th-2016 http://www.open-contracting.org/2015/12/02/upgrading-ocds-governance-process-consultation-deadline-january-5th-2016

        # TODO: remove these once the archive site is removed
        Redirect /author http://archive.standard.open-contracting.org/author
        Redirect /category http://archive.standard.open-contracting.org/category
        Redirect /comments http://archive.standard.open-contracting.org/comments
        Redirect /page http://archive.standard.open-contracting.org/page
        Redirect /wp-content http://archive.standard.open-contracting.org/wp-content
        Redirect /wp-includes http://archive.standard.open-contracting.org/wp-includes
        Redirect /wp-json http://archive.standard.open-contracting.org/wp-json

        Redirect /validator /review
        RedirectMatch ^/validator/(.*)$ /review/$1

        RedirectMatch ^/([^/]+)/?$ /$1/en
        RedirectMatch ^/profiles/([^/]+)/(?!schema)(?!extension)([^/]+)/?$ /profiles/$1/$2/en
    </Proxy>

    # With a keepalive we had problems with headers being interpreted as the start of the response.
    SetEnv proxy-nokeepalive 1

    {% for version in live_versions %}
    ProxyPass /{{ version }} !
    {% endfor %}
    {% for profile, profile_live_versions in profiles.items() %}
    ProxyPass /profiles/{{profile}}/schema !
    ProxyPass /profiles/{{profile}}/extension !
    {% for version in profile_live_versions %}
    ProxyPass /profiles/{{profile}}/{{ version }} !
    {% endfor %}
    {% endfor %}

    {% for infrastructure_version in infrastructure_live_versions %}
        ProxyPass /infrastructure/{{ infrastructure_version }} !
    {% endfor %}

    ProxyPass /legacy !
    ProxyPass /schema !
    ProxyPass /robots.txt !
    ProxyPass /switcher !
    ProxyPass /includes !
    ProxyPreserveHost On
    ProxyPass /review {{ pillar.ocds_cove_backend }}/review timeout={{ pillar.cove.apache_uwsgi_timeout }}
    ProxyPass /static {{ pillar.ocds_cove_backend }}/static
    ProxyPass /media {{ pillar.ocds_cove_backend }}/media
    ProxyPass /i18n {{ pillar.ocds_cove_backend }}/i18n
    ProxyPass / http://ocds-standard.dev3.default.opendataservices.uk0.bigv.io/
</VirtualHost>
