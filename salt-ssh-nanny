#!/bin/sh

###############################################################################
#
# salt-ssh-nanny
#
# Nannying wrapper script for salt-ssh
# David Spencer, Open Data Services Co-operative
#
# This wrapper script ensures the local branch of opendataservices-deploy (and
# the embedded private pillar repo) is up-to-date with the Github upstream, so
# we don't have little accidents.
#
# This wrapper should be symlinked at /usr/local/bin/salt-ssh to your local
# clone of the deploy repo, so that $PATH causes the wrapper to be invoked
# instead of the real salt-ssh binary.  You need to do this manually:
#
#   ln -s $(pwd)/salt-ssh-nanny /usr/local/bin/salt-ssh
#
# All arguments are passed unchanged to the real salt-ssh command, except:
#   -f  [must be first argument]
#       Invoke salt-ssh without checking the state of git
#
# Exit status:
#   1   Nanny says no.  Rebase your branch or try again with '-f'.
#   2   You're in the wrong directory, it wouldn't have worked anyway.
#
###############################################################################

# Configurables:

# Recognisable substring of our upstream Github repo name:
UPSTREAM="${UPSTREAM:-OpenDataServices/opendataservices-deploy}"

# How many seconds is too long since the last 'git fetch'? 
INTERVAL="${INTERVAL:-3600}"

###############################################################################

repo_needs_fetch()
# Function to determine whether a git repo in the current directory has been
# fetched recently (i.e. in the last $INTERVAL seconds).
# Returns:  0 = needs to be fetched, 1 = doesn't need to be fetched
{
  prevfetch=0
  if [ -f '.git/FETCH_HEAD' ]; then
    prevfetch="$(stat -c %Y .git/FETCH_HEAD)"
  elif [ -f '.git/HEAD' ]; then
    prevfetch="$(stat -c %Y .git/HEAD)"
  fi
  if [ $(( $(date +%s) - prevfetch )) -gt "$INTERVAL" ]; then
    return 0
  fi
  return 1
}

###############################################################################

set -eu

nanny='no'

# Only do the nannying if it's our deploy repo
# (use a pattern, because the URL could be http: or git: or git@)
case "$(git remote get-url --all origin 2>/dev/null)" in
  *${UPSTREAM}*)
    nanny='yes'
    ;;
  *)
    ;;
esac

# (f)orcibly suppress nannying if requested
if [ "${1}" = '-f' ]; then
  nanny='no'
  shift
fi

###############################################################################

# Nannying department

if [ "$nanny" = 'yes' ]; then

  # (1) Ensure that we're in the deploy repo's root directory
  if [ ! -d '.git' ]; then
    echo "salt-ssh-nanny: You're not in the deploy repo root directory." >&2
    exit 2
  elif [ ! -f '.git/HEAD' ]; then
    echo "salt-ssh-nanny: Are you sure this is a git repo?" >&2
    exit 2
  fi
  # Looks like a git repo, so remember whether we are on the master branch
  onmaster='no'
  [ "$(git rev-parse --abbrev-ref HEAD)" = 'master' ] && onmaster='yes'

  # (2) Fetch the deploy repo if needed
  if repo_needs_fetch; then
    git fetch --all --prune
    git remote update
  fi


  if [ "$onmaster" = 'yes' ]; then

    # (3) Keep the master branch tidy
    # We shouldn't have a dirty local tree if we're on master (i.e. deploying to live)
    if [ "$onmaster" = 'yes' ] && [ -n "$(git status -s .)" ]; then
      echo "salt-ssh-nanny: Your local tree is dirty." >&2
      echo "salt-ssh-nanny: Please commit/stash/whatever, or specify '-f' to force execution as-is." >&2
      exit 1
    fi

    # If we're behind origin/master, fast-forward master
    # (and if that fails, you've been abusing the master branch)
    if git merge-base --is-ancestor origin/master HEAD; then
      set +e
      git merge --ff-only origin/master
      failed=$?
      set -e
      if [ "$failed" != 0 ]; then
        echo "salt-ssh-nanny: Your local master branch can't fast-forward to sync with origin/master." >&2
        echo "salt-ssh-nanny: Please resolve the conflicts and try again." >&2
        exit 1
      fi
    # If we're ahead of master, that's ok but we need to maintain situational awareness ;)
    elif git merge-base --is-ancestor HEAD origin/master; then
      echo "salt-ssh-nanny: This is a polite reminder: you are ahead of origin/master, please push sometime." >&2
    else
      # Welcome to hell
      echo "salt-ssh-nanny: Your local master branch conflicts with origin/master." >&2
      echo "salt-ssh-nanny: Please resolve the conflicts and try again." >&2
      exit 1
    fi

  else

    # (4) For other local branches, origin/master should be an ancestor of the latest local commit
    if ! git merge-base --is-ancestor origin/master HEAD; then
      echo "salt-ssh-nanny: Your local branch is out of date with respect to origin/master." >&2
      echo "salt-ssh-nanny: Please rebase, or specify '-f' to force execution as-is." >&2
      exit 1
    fi

  fi

  # (5) Fetch the private pillar if needed and fast-forward
  (
    cd pillar/private
    if repo_needs_fetch; then
      git fetch --all
      # Try to fast-forward -- this will fail if the local branch conflicts or local tree is dirty
      # (having a dirty tree is only a problem if the local branch needs to be updated)
      set +e
      git merge --ff-only origin/master
      failed=$?
      set -e
      if [ "$failed" != 0 ]; then
        echo "salt-ssh-nanny: The private pillar is out of date or dirty and can't fast-forward." >&2
        echo "salt-ssh-nanny: Please resolve the conflicts and try again, or specify '-f' to force execution." >&2
        exit 1
      fi
    fi
  )

fi

###############################################################################

# Finally, hand off to the real salt-ssh
exec /usr/bin/salt-ssh "${@}"
